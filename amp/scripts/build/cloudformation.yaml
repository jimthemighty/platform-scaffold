---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AMP proxy application
Parameters:
  StaticUrl:
    Type: String
    Description: The URL for static assets required by the app (eg. an S3 bucket)

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Sub API Gateway for ${AWS::StackName}
        basePath: /prod
        schemes:
        - https
        paths:
          /:
            x-amazon-apigateway-any-method:
              produces:
              - text/html
              responses:
                "200":
                  description: A rendered AMP page
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AmpRendererFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
              - text/html
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              responses:
                "200":
                  description: A rendered AMP page
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AmpRendererFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
        x-amazon-apigateway-binary-media-types:
          - '*/*'
      StageName: prod

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AmpRendererFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*/*

  AmpRendererFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./server/
      Handler: main.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 30
      Environment:
        Variables:
          STATIC_URL: !Ref StaticUrl
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${AmpRendererFunction}

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ApiGatewayApi}/stages/prod

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request on the root resource of your API.
    Value: !Sub https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
